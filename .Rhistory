# Change the corresponding code or remove as needed.
alphadiv1 <- alphadiv
plots <- 30
years <- 35
library(dplyr)
library(tidyr)
library(ggplot2)
setwd("/Users/evanma/Dropbox/01_YNC/04 Ecological Succession Modeling/ecologicalmodelling")
# Read the output from the simulation model
base_wd <- "/Users/evanma/Dropbox/01_YNC/04 Ecological Succession Modeling/ecologicalmodelling/sim_results/"
results  <- read.table(paste(base_wd,"sim_results0.csv", sep=""), header=F)
# Reorganize the dataframe to prepare for further analysis
# Assuming we have N years and M plots:
# Add plot number (repeat N x 1, N x 2 etc.) and year number (repeat M x 1:N)
results$year <- rep(1:years,times=plots)
results$plot <- rep(1:plots,each=years)
#
# # Reorganize the data in blocks of years instead of blocks of plots
results <-  results %>%
# move last 2 columns to form, not needed but easier
select(plot, year, everything()) %>%
arrange(year, plot)
# write.csv(results, file="results.csv")
# for compatibility with vegan 2.4-3, where the functions are taken from vegan 2.4-2
`diversity` <-
function (x, index = "shannon", MARGIN = 1, base = exp(1))
{
x <- drop(as.matrix(x))
if (any(x < 0, na.rm = TRUE))
stop("input data must be non-negative")
INDICES <- c("shannon", "simpson", "invsimpson")
index <- match.arg(index, INDICES)
if (length(dim(x)) > 1) {
total <- apply(x, MARGIN, sum)
x <- sweep(x, MARGIN, total, "/")
} else {
x <- x/(total <- sum(x))
}
if (index == "shannon")
x <- -x * log(x, base)
else
x <- x*x
if (length(dim(x)) > 1)
H <- apply(x, MARGIN, sum, na.rm = TRUE)
else
H <- sum(x, na.rm = TRUE)
if (index == "simpson")
H <- 1 - H
else if (index == "invsimpson")
H <- 1/H
## check NA in data
if (any(is.na(total)))
is.na(H) <- is.na(total)
H
}
`renyi` <-
function (x, scales = c(0, 0.25, 0.5, 1, 2, 4, 8, 16, 32, 64,
Inf), hill = FALSE)
{
x <- as.matrix(x)
n <- nrow(x)
p <- ncol(x)
if (p == 1) {
x <- t(x)
n <- nrow(x)
p <- ncol(x)
}
## do not make total=1 if not needed (diversity() does anyway,
## species richness does not need)
if (!all(scales %in% c(0,1)))
x <- sweep(x, 1, rowSums(x), "/")
m <- length(scales)
result <- array(0, dim = c(n, m))
dimnames(result) <- list(sites = rownames(x), scale = scales)
for (a in 1:m) {
if (scales[a] != 0 && scales[a] != 1 && scales[a] !=
Inf) {
result[, a] <- log(apply(x^scales[a], 1, sum))/(1 -
scales[a])
}
else {
if (scales[a] == 0) {
result[, a] <- log(apply(x > 0, 1, sum))
}
else if (scales[a] == Inf) {
result[, a] <- -log(apply(x, 1, max))
}
else {
result[, a] <- diversity(x)
}
}
}
if (hill)
result <- exp(result)
if (any(dim(result) == 1))
result <- drop(result)
else
result <- as.data.frame(result)
class(result) <- c("renyi", class(result))
result
}
# alternative approaches for dplyr's select, using indexing
# data[,c(ncol(data),1:(ncol(data)-1))]
# df[,c(which(colnames(df)=="desired_colname"),which(colnames(df)!="desired_colname"))]
#
# # Calculate Alpha diversities per plot x year
alphadiv <- data.frame(renyi(results[,-c(1:2)], scales = c(0,1,2), hill = TRUE))
plotyear <- data.frame(results[, c(1:2)])
alphadiv <- cbind(plotyear, alphadiv); rm(plotyear)
colnames(alphadiv)[c(3:5)] <- c("A0", "A1", "A2")
#
# # Calculate averages per year
alphadiv <- alphadiv %>%
group_by(year) %>%
summarise(A0avg=mean(A0),
A1avg=mean(A1),
A2avg=mean(A2),
A0cil=mean(A0)-1.96*sd(A0)/sqrt(15),
A1cil=mean(A1)-1.96*sd(A1)/sqrt(15),
A2cil=mean(A2)-1.96*sd(A2)/sqrt(15),
A0cih=mean(A0)+1.96*sd(A0)/sqrt(15),
A1cih=mean(A1)+1.96*sd(A1)/sqrt(15),
A2cih=mean(A2)+1.96*sd(A2)/sqrt(15))
# Plotting the data
# The procedure is the following: If you want to plot two contrasting lines
# (e.g., with different local species pool sizes), run the model once, then the code above.
# That will give you a dataframe named alphadiv.Then run the line below.
# Then run the model again, the code above again and the line below again,
# only changing alphadiv1 to alphadiv2. Then run the rest of the code below.
# This graph plots two lines: alphadiv1 and alphadiv2.
# You remove one or add as many lines as you want.
# It also plots a dotted line indicating the local pool size.
# Change the corresponding code or remove as needed.
alphadiv2 <- alphadiv
ggplot() +
coord_cartesian(xlim = c(0, 36), ylim= c(0,240), expand = F) +
### Points of real field data
### Field data, to get these data points run 2_BasicDataPreparation.Rmd
# scale_shape_discrete(solid=T) +
# geom_point(data=SD, aes(age, H0.Q1.TP), size = 3, shape=21,  fill = "grey", colour = "white", stroke = 0, alpha=0.3) +
### line indicates size of local species pool
geom_segment(aes(x=0,xend=35,y=240,yend=240), size =1, colour = "grey", linetype="dashed", alpha = 1) +
## The confidence interval
geom_ribbon(data=alphadiv1, aes(x=year, ymin=A0cil, ymax=A0cih), fill= "red", alpha=0.5) +
# The mean
geom_line(data=alphadiv1, aes(year, A0avg), colour="white", size = .4) +
### line indicates size of local species pool
geom_segment(aes(x=0,xend=35,y=240,yend=240), size =1, colour = "blue", linetype="dashed", alpha = 1) +
## The confidence interval
geom_ribbon(data=alphadiv2, aes(x=year, ymin=A0cil, ymax=A0cih), fill= "blue", alpha=0.65) +
# The mean
geom_line(data=alphadiv2, aes(year, A0avg), colour="white", size = .4) +
# geom_segment(aes(x=0,xend=35,y=240,yend=240), size =1, colour = "green", linetype="dashed", alpha = 1) +
# ## The confidence interval
# geom_ribbon(data=alphadiv3, aes(x=year, ymin=A0cil, ymax=A0cih), fill= "green", alpha=0.65) +
# # The mean
# geom_line(data=alphadiv3, aes(year, A0avg), colour="white", size = .4) +
### layout of graph
xlab("Successional Age (Years)") + ylab("Species Richness") +
theme(axis.title.x=element_text(size=15)) +
theme(axis.text.x = element_text(size=12, colour = "black")) +
theme(axis.title.y=element_text(size=15)) +
theme(axis.text.y = element_text(size=12, colour = "black")) +
theme(axis.title.y=element_text(margin=margin(0,15,0,0))) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme(panel.background = element_blank()) +
#theme(axis.ticks = element_blank()) +
theme(panel.border= element_blank())+
theme(axis.line.x = element_line(color="black", size = 1),
axis.line.y = element_line(color="black", size = 1))
# 336699.  darker: #23476b, lighter: #7093b7
# f2d70c.  darker: #dfc60b, lighter: #f6e143
plots <- 30
years <- 35
library(dplyr)
library(tidyr)
library(ggplot2)
setwd("/Users/evanma/Dropbox/01_YNC/04 Ecological Succession Modeling/ecologicalmodelling")
# Read the output from the simulation model
base_wd <- "/Users/evanma/Dropbox/01_YNC/04 Ecological Succession Modeling/ecologicalmodelling/sim_results/"
results  <- read.table(paste(base_wd,"sim_results0.csv", sep=""), header=F)
# Reorganize the dataframe to prepare for further analysis
# Assuming we have N years and M plots:
# Add plot number (repeat N x 1, N x 2 etc.) and year number (repeat M x 1:N)
results$year <- rep(1:years,times=plots)
results$plot <- rep(1:plots,each=years)
#
# # Reorganize the data in blocks of years instead of blocks of plots
results <-  results %>%
# move last 2 columns to form, not needed but easier
select(plot, year, everything()) %>%
arrange(year, plot)
# write.csv(results, file="results.csv")
# for compatibility with vegan 2.4-3, where the functions are taken from vegan 2.4-2
`diversity` <-
function (x, index = "shannon", MARGIN = 1, base = exp(1))
{
x <- drop(as.matrix(x))
if (any(x < 0, na.rm = TRUE))
stop("input data must be non-negative")
INDICES <- c("shannon", "simpson", "invsimpson")
index <- match.arg(index, INDICES)
if (length(dim(x)) > 1) {
total <- apply(x, MARGIN, sum)
x <- sweep(x, MARGIN, total, "/")
} else {
x <- x/(total <- sum(x))
}
if (index == "shannon")
x <- -x * log(x, base)
else
x <- x*x
if (length(dim(x)) > 1)
H <- apply(x, MARGIN, sum, na.rm = TRUE)
else
H <- sum(x, na.rm = TRUE)
if (index == "simpson")
H <- 1 - H
else if (index == "invsimpson")
H <- 1/H
## check NA in data
if (any(is.na(total)))
is.na(H) <- is.na(total)
H
}
`renyi` <-
function (x, scales = c(0, 0.25, 0.5, 1, 2, 4, 8, 16, 32, 64,
Inf), hill = FALSE)
{
x <- as.matrix(x)
n <- nrow(x)
p <- ncol(x)
if (p == 1) {
x <- t(x)
n <- nrow(x)
p <- ncol(x)
}
## do not make total=1 if not needed (diversity() does anyway,
## species richness does not need)
if (!all(scales %in% c(0,1)))
x <- sweep(x, 1, rowSums(x), "/")
m <- length(scales)
result <- array(0, dim = c(n, m))
dimnames(result) <- list(sites = rownames(x), scale = scales)
for (a in 1:m) {
if (scales[a] != 0 && scales[a] != 1 && scales[a] !=
Inf) {
result[, a] <- log(apply(x^scales[a], 1, sum))/(1 -
scales[a])
}
else {
if (scales[a] == 0) {
result[, a] <- log(apply(x > 0, 1, sum))
}
else if (scales[a] == Inf) {
result[, a] <- -log(apply(x, 1, max))
}
else {
result[, a] <- diversity(x)
}
}
}
if (hill)
result <- exp(result)
if (any(dim(result) == 1))
result <- drop(result)
else
result <- as.data.frame(result)
class(result) <- c("renyi", class(result))
result
}
# alternative approaches for dplyr's select, using indexing
# data[,c(ncol(data),1:(ncol(data)-1))]
# df[,c(which(colnames(df)=="desired_colname"),which(colnames(df)!="desired_colname"))]
#
# # Calculate Alpha diversities per plot x year
alphadiv <- data.frame(renyi(results[,-c(1:2)], scales = c(0,1,2), hill = TRUE))
plotyear <- data.frame(results[, c(1:2)])
alphadiv <- cbind(plotyear, alphadiv); rm(plotyear)
colnames(alphadiv)[c(3:5)] <- c("A0", "A1", "A2")
#
# # Calculate averages per year
alphadiv <- alphadiv %>%
group_by(year) %>%
summarise(A0avg=mean(A0),
A1avg=mean(A1),
A2avg=mean(A2),
A0cil=mean(A0)-1.96*sd(A0)/sqrt(15),
A1cil=mean(A1)-1.96*sd(A1)/sqrt(15),
A2cil=mean(A2)-1.96*sd(A2)/sqrt(15),
A0cih=mean(A0)+1.96*sd(A0)/sqrt(15),
A1cih=mean(A1)+1.96*sd(A1)/sqrt(15),
A2cih=mean(A2)+1.96*sd(A2)/sqrt(15))
# Plotting the data
# The procedure is the following: If you want to plot two contrasting lines
# (e.g., with different local species pool sizes), run the model once, then the code above.
# That will give you a dataframe named alphadiv.Then run the line below.
# Then run the model again, the code above again and the line below again,
# only changing alphadiv1 to alphadiv2. Then run the rest of the code below.
# This graph plots two lines: alphadiv1 and alphadiv2.
# You remove one or add as many lines as you want.
# It also plots a dotted line indicating the local pool size.
# Change the corresponding code or remove as needed.
alphadiv2 <- alphadiv
ggplot() +
coord_cartesian(xlim = c(0, 36), ylim= c(0,240), expand = F) +
### Points of real field data
### Field data, to get these data points run 2_BasicDataPreparation.Rmd
# scale_shape_discrete(solid=T) +
# geom_point(data=SD, aes(age, H0.Q1.TP), size = 3, shape=21,  fill = "grey", colour = "white", stroke = 0, alpha=0.3) +
### line indicates size of local species pool
geom_segment(aes(x=0,xend=35,y=240,yend=240), size =1, colour = "grey", linetype="dashed", alpha = 1) +
## The confidence interval
geom_ribbon(data=alphadiv1, aes(x=year, ymin=A0cil, ymax=A0cih), fill= "red", alpha=0.5) +
# The mean
geom_line(data=alphadiv1, aes(year, A0avg), colour="white", size = .4) +
### line indicates size of local species pool
geom_segment(aes(x=0,xend=35,y=240,yend=240), size =1, colour = "blue", linetype="dashed", alpha = 1) +
## The confidence interval
geom_ribbon(data=alphadiv2, aes(x=year, ymin=A0cil, ymax=A0cih), fill= "blue", alpha=0.65) +
# The mean
geom_line(data=alphadiv2, aes(year, A0avg), colour="white", size = .4) +
# geom_segment(aes(x=0,xend=35,y=240,yend=240), size =1, colour = "green", linetype="dashed", alpha = 1) +
# ## The confidence interval
# geom_ribbon(data=alphadiv3, aes(x=year, ymin=A0cil, ymax=A0cih), fill= "green", alpha=0.65) +
# # The mean
# geom_line(data=alphadiv3, aes(year, A0avg), colour="white", size = .4) +
### layout of graph
xlab("Successional Age (Years)") + ylab("Species Richness") +
theme(axis.title.x=element_text(size=15)) +
theme(axis.text.x = element_text(size=12, colour = "black")) +
theme(axis.title.y=element_text(size=15)) +
theme(axis.text.y = element_text(size=12, colour = "black")) +
theme(axis.title.y=element_text(margin=margin(0,15,0,0))) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme(panel.background = element_blank()) +
#theme(axis.ticks = element_blank()) +
theme(panel.border= element_blank())+
theme(axis.line.x = element_line(color="black", size = 1),
axis.line.y = element_line(color="black", size = 1))
# 336699.  darker: #23476b, lighter: #7093b7
# f2d70c.  darker: #dfc60b, lighter: #f6e143
plots <- 30
years <- 35
library(dplyr)
library(tidyr)
library(ggplot2)
setwd("/Users/evanma/Dropbox/01_YNC/04 Ecological Succession Modeling/ecologicalmodelling")
# Read the output from the simulation model
base_wd <- "/Users/evanma/Dropbox/01_YNC/04 Ecological Succession Modeling/ecologicalmodelling/sim_results/"
results  <- read.table(paste(base_wd,"sim_results0.csv", sep=""), header=F)
# Reorganize the dataframe to prepare for further analysis
# Assuming we have N years and M plots:
# Add plot number (repeat N x 1, N x 2 etc.) and year number (repeat M x 1:N)
results$year <- rep(1:years,times=plots)
results$plot <- rep(1:plots,each=years)
#
# # Reorganize the data in blocks of years instead of blocks of plots
results <-  results %>%
# move last 2 columns to form, not needed but easier
select(plot, year, everything()) %>%
arrange(year, plot)
# write.csv(results, file="results.csv")
# for compatibility with vegan 2.4-3, where the functions are taken from vegan 2.4-2
`diversity` <-
function (x, index = "shannon", MARGIN = 1, base = exp(1))
{
x <- drop(as.matrix(x))
if (any(x < 0, na.rm = TRUE))
stop("input data must be non-negative")
INDICES <- c("shannon", "simpson", "invsimpson")
index <- match.arg(index, INDICES)
if (length(dim(x)) > 1) {
total <- apply(x, MARGIN, sum)
x <- sweep(x, MARGIN, total, "/")
} else {
x <- x/(total <- sum(x))
}
if (index == "shannon")
x <- -x * log(x, base)
else
x <- x*x
if (length(dim(x)) > 1)
H <- apply(x, MARGIN, sum, na.rm = TRUE)
else
H <- sum(x, na.rm = TRUE)
if (index == "simpson")
H <- 1 - H
else if (index == "invsimpson")
H <- 1/H
## check NA in data
if (any(is.na(total)))
is.na(H) <- is.na(total)
H
}
`renyi` <-
function (x, scales = c(0, 0.25, 0.5, 1, 2, 4, 8, 16, 32, 64,
Inf), hill = FALSE)
{
x <- as.matrix(x)
n <- nrow(x)
p <- ncol(x)
if (p == 1) {
x <- t(x)
n <- nrow(x)
p <- ncol(x)
}
## do not make total=1 if not needed (diversity() does anyway,
## species richness does not need)
if (!all(scales %in% c(0,1)))
x <- sweep(x, 1, rowSums(x), "/")
m <- length(scales)
result <- array(0, dim = c(n, m))
dimnames(result) <- list(sites = rownames(x), scale = scales)
for (a in 1:m) {
if (scales[a] != 0 && scales[a] != 1 && scales[a] !=
Inf) {
result[, a] <- log(apply(x^scales[a], 1, sum))/(1 -
scales[a])
}
else {
if (scales[a] == 0) {
result[, a] <- log(apply(x > 0, 1, sum))
}
else if (scales[a] == Inf) {
result[, a] <- -log(apply(x, 1, max))
}
else {
result[, a] <- diversity(x)
}
}
}
if (hill)
result <- exp(result)
if (any(dim(result) == 1))
result <- drop(result)
else
result <- as.data.frame(result)
class(result) <- c("renyi", class(result))
result
}
# alternative approaches for dplyr's select, using indexing
# data[,c(ncol(data),1:(ncol(data)-1))]
# df[,c(which(colnames(df)=="desired_colname"),which(colnames(df)!="desired_colname"))]
#
# # Calculate Alpha diversities per plot x year
alphadiv <- data.frame(renyi(results[,-c(1:2)], scales = c(0,1,2), hill = TRUE))
plotyear <- data.frame(results[, c(1:2)])
alphadiv <- cbind(plotyear, alphadiv); rm(plotyear)
colnames(alphadiv)[c(3:5)] <- c("A0", "A1", "A2")
#
# # Calculate averages per year
alphadiv <- alphadiv %>%
group_by(year) %>%
summarise(A0avg=mean(A0),
A1avg=mean(A1),
A2avg=mean(A2),
A0cil=mean(A0)-1.96*sd(A0)/sqrt(15),
A1cil=mean(A1)-1.96*sd(A1)/sqrt(15),
A2cil=mean(A2)-1.96*sd(A2)/sqrt(15),
A0cih=mean(A0)+1.96*sd(A0)/sqrt(15),
A1cih=mean(A1)+1.96*sd(A1)/sqrt(15),
A2cih=mean(A2)+1.96*sd(A2)/sqrt(15))
# Plotting the data
# The procedure is the following: If you want to plot two contrasting lines
# (e.g., with different local species pool sizes), run the model once, then the code above.
# That will give you a dataframe named alphadiv.Then run the line below.
# Then run the model again, the code above again and the line below again,
# only changing alphadiv1 to alphadiv2. Then run the rest of the code below.
# This graph plots two lines: alphadiv1 and alphadiv2.
# You remove one or add as many lines as you want.
# It also plots a dotted line indicating the local pool size.
# Change the corresponding code or remove as needed.
alphadiv2 <- alphadiv
ggplot() +
coord_cartesian(xlim = c(0, 36), ylim= c(0,240), expand = F) +
### Points of real field data
### Field data, to get these data points run 2_BasicDataPreparation.Rmd
# scale_shape_discrete(solid=T) +
# geom_point(data=SD, aes(age, H0.Q1.TP), size = 3, shape=21,  fill = "grey", colour = "white", stroke = 0, alpha=0.3) +
### line indicates size of local species pool
geom_segment(aes(x=0,xend=35,y=240,yend=240), size =1, colour = "grey", linetype="dashed", alpha = 1) +
## The confidence interval
geom_ribbon(data=alphadiv1, aes(x=year, ymin=A0cil, ymax=A0cih), fill= "red", alpha=0.5) +
# The mean
geom_line(data=alphadiv1, aes(year, A0avg), colour="white", size = .4) +
### line indicates size of local species pool
geom_segment(aes(x=0,xend=35,y=240,yend=240), size =1, colour = "blue", linetype="dashed", alpha = 1) +
## The confidence interval
geom_ribbon(data=alphadiv2, aes(x=year, ymin=A0cil, ymax=A0cih), fill= "blue", alpha=0.65) +
# The mean
geom_line(data=alphadiv2, aes(year, A0avg), colour="white", size = .4) +
# geom_segment(aes(x=0,xend=35,y=240,yend=240), size =1, colour = "green", linetype="dashed", alpha = 1) +
# ## The confidence interval
# geom_ribbon(data=alphadiv3, aes(x=year, ymin=A0cil, ymax=A0cih), fill= "green", alpha=0.65) +
# # The mean
# geom_line(data=alphadiv3, aes(year, A0avg), colour="white", size = .4) +
### layout of graph
xlab("Successional Age (Years)") + ylab("Species Richness") +
theme(axis.title.x=element_text(size=15)) +
theme(axis.text.x = element_text(size=12, colour = "black")) +
theme(axis.title.y=element_text(size=15)) +
theme(axis.text.y = element_text(size=12, colour = "black")) +
theme(axis.title.y=element_text(margin=margin(0,15,0,0))) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme(panel.background = element_blank()) +
#theme(axis.ticks = element_blank()) +
theme(panel.border= element_blank())+
theme(axis.line.x = element_line(color="black", size = 1),
axis.line.y = element_line(color="black", size = 1))
# 336699.  darker: #23476b, lighter: #7093b7
# f2d70c.  darker: #dfc60b, lighter: #f6e143
